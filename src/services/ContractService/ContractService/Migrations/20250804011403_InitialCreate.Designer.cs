// <auto-generated />
using System;
using ContractService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContractService.Migrations
{
    [DbContext(typeof(ContractDbContext))]
    [Migration("20250804011403_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContractService.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("approval_notes");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_date");

                    b.Property<bool>("AutoRenewal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("auto_renewal");

                    b.Property<int?>("AutoRenewalDurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("auto_renewal_duration_days");

                    b.Property<string>("BillingFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("billing_frequency");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contract_number");

                    b.Property<Guid>("ContractTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<string>("CustomFields")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_fields");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("DocumentContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("document_content_type");

                    b.Property<string>("DocumentFileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_file_name");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("document_path");

                    b.Property<long?>("DocumentSize")
                        .HasColumnType("bigint")
                        .HasColumnName("document_size");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("InternalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("internal_notes");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastStatusChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_status_change_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("LastStatusChangedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_status_changed_by_id");

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("notifications_enabled");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ParentContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_contract_id");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("priority");

                    b.Property<string>("ProjectCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("project_code");

                    b.Property<int>("RenewalReminderDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("renewal_reminder_days");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signed_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("StatusChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("status_change_reason");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tags");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Terms")
                        .HasColumnType("text")
                        .HasColumnName("terms");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_contracts_contract_number");

                    b.HasIndex("ContractTypeId")
                        .HasDatabaseName("ix_contracts_contract_type_id");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("ix_contracts_end_date");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_contracts_owner_id");

                    b.HasIndex("ParentContractId");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("ix_contracts_start_date");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_contracts_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_contracts_tenant_id");

                    b.HasIndex("TenantId", "EndDate")
                        .HasDatabaseName("ix_contracts_tenant_end_date");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("ix_contracts_tenant_status");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("ContractService.Models.ContractParty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_line2");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person_name");

                    b.Property<string>("ContactPersonTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person_title");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("LegalName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("legal_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int>("PartyType")
                        .HasColumnType("integer")
                        .HasColumnName("party_type");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registration_number");

                    b.Property<bool>("RequiresSignature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("requires_signature");

                    b.Property<string>("SignatureData")
                        .HasColumnType("text")
                        .HasColumnName("signature_data");

                    b.Property<string>("SignatureIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("signature_ip_address");

                    b.Property<string>("SignedByName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("signed_by_name");

                    b.Property<string>("SignedByTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("signed_by_title");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signed_date");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .HasDatabaseName("ix_contract_parties_contract_id");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_contract_parties_email");

                    b.HasIndex("PartyType")
                        .HasDatabaseName("ix_contract_parties_party_type");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_contract_parties_tenant_id");

                    b.HasIndex("ContractId", "PartyType")
                        .HasDatabaseName("ix_contract_parties_contract_party_type");

                    b.HasIndex("TenantId", "Name")
                        .HasDatabaseName("ix_contract_parties_tenant_name");

                    b.ToTable("contract_parties", (string)null);
                });

            modelBuilder.Entity("ContractService.Models.ContractType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("#007bff")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomFields")
                        .HasColumnType("jsonb")
                        .HasColumnName("custom_fields");

                    b.Property<int?>("DefaultDurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("default_duration_days");

                    b.Property<int>("DefaultReminderDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("default_reminder_days");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("requires_approval");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("sort_order");

                    b.Property<bool>("SupportsRenewal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("supports_renewal");

                    b.Property<string>("Template")
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_contract_types_is_active");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("ix_contract_types_sort_order");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_contract_types_tenant_id");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_contract_types_tenant_name");

                    b.ToTable("contract_types", (string)null);
                });

            modelBuilder.Entity("ContractService.Models.Contract", b =>
                {
                    b.HasOne("ContractService.Models.ContractType", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ContractService.Models.Contract", "ParentContract")
                        .WithMany("ChildContracts")
                        .HasForeignKey("ParentContractId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ContractType");

                    b.Navigation("ParentContract");
                });

            modelBuilder.Entity("ContractService.Models.ContractParty", b =>
                {
                    b.HasOne("ContractService.Models.Contract", "Contract")
                        .WithMany("Parties")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ContractService.Models.Contract", b =>
                {
                    b.Navigation("ChildContracts");

                    b.Navigation("Parties");
                });

            modelBuilder.Entity("ContractService.Models.ContractType", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
